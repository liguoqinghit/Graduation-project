# coding = utf-8
import pandas as pd
import networkx as nx
from collections import Counter
import numpy_test

if __name__ == '__main__':
    '''
    (1) 清空community_6.csv
    (2) 将某个社团(也可以多个社团)的信息写入文件
        先从文件中找到社团中的节点
        再从总文件中找到节点信息，写入文件
        再从该文件找到非社团节点，从总文件找到非社团节点的数据
    (3) 统计社团的边的种类和数量 (边的标签, 对应数量)
    (4) 将每个社团的内容写入对应文件 社团1 写入 modularity(20w)_community_1.csv
    '''
    pass
    '''
    l = [(27, 6), (43, 6), (58, 6), (79, 6), (105, 6), (4, 5), (21, 5), (30, 5), (97, 5), (6, 3), (7, 3), (12, 3), (16, 3), (17, 3), (19, 3), (24, 3), (25, 3), (26, 3), (28, 3), (31, 3), (33, 3), (34, 3), (36, 3), (38, 3), (40, 3), (42, 3), (44, 3), (45, 3), (46, 3), (49, 3), (50, 3), (52, 3), (53, 3), (55, 3), (56, 3), (57, 3), (59, 3), (60, 3), (62, 3), (63, 3), (65, 3), (94, 3), (95, 3), (104, 3), (70, 2), (71, 2), (73, 2), (74, 2), (75, 2), (78, 2), (80, 2), (82, 2), (83, 2), (84, 2), (85, 2), (86, 2), (87, 2), (88, 2), (89, 2), (92, 2), (93, 2), (96, 2), (98, 2), (99, 2), (100, 2), (101, 2), (102, 2), (103, 2)]
    m = [i[0] for i in l]
    data = []
    other = set()
    # with open('community_6.csv', 'w', encoding='utf-8') as w:
    #     w.write('')
    index = 0
    with open('modularity4.csv', 'r', encoding='utf-8') as f:
        for line in f:
            index += 1
            if index == 1:
                continue
            line = line.strip().split(',')
            # if line[3] == '23':
            if int(line[3]) in m:
                data.append(line[0].replace('"', ''))
    print(data)
    with open('community_6.csv', 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip().split(',')
            if line[0] not in data:
                other.add(line[0])
            if line[2] not in data:
                other.add(line[2])
    print(other)
    with open('community_6.csv', 'a', encoding='utf-8') as w:
        with open('新数据.csv', 'r', encoding='utf-8') as f:
            for line in f:
                temp = line.split(',')
                if temp[0] in other or temp[2] in other:
                # if temp[0] in data:
                    w.write(line)
    
    
    data = []
    with open('gephi_关系社团划分_4_3_点.csv', 'r', encoding='utf-8') as r:
        index = 0
        for line in r:
            index += 1
            if index == 1:
                continue
            line = line.strip().split(',')
            if line[4] == '2':
                data.append(line[1])
    print(len(data))
    dic = {}
    df = pd.read_csv('community_4.csv', encoding='utf-8')
    G = nx.from_pandas_edgelist(df, '实体', '值', '属性')
    attributes = []
    IG = nx.Graph()
    IG.subgraph()
    subgraph = G.subgraph(data)
    for i, j, d in subgraph.edges(data="属性"):
        attributes.append(d)
    attr_counter = Counter(attributes)
    print(attr_counter.most_common())
    '''
    # [(97, 19907), (5, 13201), (2, 9773), (1, 8969), (3, 8579), (26, 6086), (6, 5562), (23, 5254), (154, 3597), (9, 2963), (4, 2553), (15, 1868), (197, 1635), (14, 596), (75, 55), (280, 6), (144, 6), (204, 6), (58, 5), (160, 5), (171, 5), (212, 5), (354, 5), (32, 4), (91, 4), (124, 4), (223, 4), (312, 4), (329, 4), (21, 3), (31, 3), (33, 3), (35, 3), (42, 3), (43, 3), (44, 3), (62, 3), (63, 3), (74, 3), (80, 3), (82, 3), (90, 3), (92, 3), (108, 3), (111, 3), (113, 3), (115, 3), (129, 3), (133, 3), (139, 3), (145, 3), (155, 3), (157, 3), (159, 3), (164, 3), (166, 3), (167, 3), (170, 3), (175, 3), (181, 3), (183, 3), (184, 3), (192, 3), (193, 3), (195, 3), (196, 3), (201, 3), (205, 3), (210, 3), (213, 3), (214, 3), (224, 3), (225, 3), (228, 3), (230, 3), (237, 3), (244, 3), (250, 3), (270, 3), (271, 3), (272, 3), (291, 3), (295, 3), (302, 3), (308, 3), (310, 3), (325, 3), (335, 3), (345, 3), (355, 3), (360, 3), (0, 2), (7, 2), (8, 2), (10, 2), (11, 2), (12, 2), (13, 2), (16, 2), (17, 2), (18, 2), (19, 2), (20, 2), (22, 2), (24, 2), (25, 2), (27, 2), (28, 2), (29, 2), (30, 2), (34, 2), (36, 2), (37, 2), (38, 2), (39, 2), (40, 2), (41, 2), (45, 2), (46, 2), (47, 2), (48, 2), (49, 2), (50, 2), (51, 2), (52, 2), (53, 2), (54, 2), (55, 2), (56, 2), (57, 2), (59, 2), (60, 2), (61, 2), (64, 2), (65, 2), (66, 2), (67, 2), (68, 2), (69, 2), (70, 2), (71, 2), (72, 2), (73, 2), (76, 2), (77, 2), (78, 2), (79, 2), (81, 2), (83, 2), (84, 2), (85, 2), (86, 2), (87, 2), (88, 2), (89, 2), (93, 2), (94, 2), (95, 2), (96, 2), (98, 2), (99, 2), (100, 2), (101, 2), (102, 2), (103, 2), (104, 2), (105, 2), (106, 2), (107, 2), (109, 2), (110, 2), (112, 2), (114, 2), (116, 2), (117, 2), (118, 2), (119, 2), (120, 2), (121, 2), (122, 2), (123, 2), (125, 2), (126, 2), (127, 2), (128, 2), (130, 2), (131, 2), (132, 2), (134, 2), (135, 2), (136, 2), (137, 2), (138, 2), (140, 2), (141, 2), (142, 2), (143, 2), (146, 2), (147, 2), (148, 2), (149, 2), (150, 2), (151, 2), (152, 2), (153, 2), (156, 2), (158, 2), (161, 2), (162, 2), (163, 2), (165, 2), (168, 2), (169, 2), (172, 2), (173, 2), (174, 2), (176, 2), (177, 2), (178, 2), (179, 2), (180, 2), (182, 2), (185, 2), (186, 2), (187, 2), (188, 2), (189, 2), (190, 2), (191, 2), (194, 2), (198, 2), (199, 2), (200, 2), (202, 2), (203, 2), (206, 2), (207, 2), (208, 2), (209, 2), (211, 2), (215, 2), (216, 2), (217, 2), (218, 2), (219, 2), (220, 2), (221, 2), (222, 2), (226, 2), (227, 2), (229, 2), (231, 2), (232, 2), (233, 2), (234, 2), (235, 2), (236, 2), (238, 2), (239, 2), (240, 2), (241, 2), (242, 2), (243, 2), (245, 2), (246, 2), (247, 2), (248, 2), (249, 2), (251, 2), (252, 2), (253, 2), (254, 2), (255, 2), (256, 2), (257, 2), (258, 2), (259, 2), (260, 2), (261, 2), (262, 2), (263, 2), (264, 2), (265, 2), (266, 2), (267, 2), (268, 2), (269, 2), (273, 2), (274, 2), (275, 2), (276, 2), (277, 2), (278, 2), (279, 2), (281, 2), (282, 2), (283, 2), (284, 2), (285, 2), (286, 2), (287, 2), (288, 2), (289, 2), (290, 2), (292, 2), (293, 2), (294, 2), (296, 2), (297, 2), (298, 2), (299, 2), (300, 2), (301, 2), (303, 2), (304, 2), (305, 2), (306, 2), (307, 2), (309, 2), (311, 2), (313, 2), (314, 2), (315, 2), (316, 2), (317, 2), (318, 2), (319, 2), (320, 2), (321, 2), (322, 2), (323, 2), (324, 2), (326, 2), (327, 2), (328, 2), (330, 2), (331, 2), (332, 2), (333, 2), (334, 2), (336, 2), (337, 2), (338, 2), (339, 2), (340, 2), (341, 2), (342, 2), (343, 2), (344, 2), (346, 2), (347, 2), (348, 2), (349, 2), (350, 2), (351, 2), (352, 2), (353, 2), (356, 2), (357, 2), (358, 2), (359, 2), (361, 2)]
    # 数量 : 7000
    # 内容 : 人物 电影 音乐
    # [154, 9, 4]
    # 数量 : 4000 2000 1000
    # 内容 : 食物 演员 杂
    # [15, 197, 14]
    l = [(75, 55), (280, 6), (144, 6), (204, 6)]
    communities = [i for i, j in l]
    print(communities)
    for community in communities:
        df = pd.read_csv('modularity(20w).csv', encoding='utf-8')
        data = df.loc[df['modularity_class'] == community]
        data = data['Id']
        data_values = data.values
        print(len(data.values))
        data2 = []
        with open(r'C:\work\graph_of_knowledge\group-of-service\entity4.csv', 'r', encoding='utf-8') as r:
            index = 0
            for line in r:
                index += 1
                if index == 1:
                    continue
                line = line.strip().split(',')
                if line[0] in data_values or line[2] in data_values:
                    data2.append(line)
        print(len(data2))
        numpy_test.two_dimensional_list_to_file('modularity(20w)_community_%s.csv' % community, data2)
