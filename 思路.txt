community_4.csv
思路：
    重新筛选出一组数据，需满足: 1. 巨人节点的比例不能太大
                              2. 传统社团划分效果不好或划分不出来想要结果


experiment_community_detection7.py
思路：
    1. 还未构思好

问题：
    1.
    边的数据 v+w 不用减  相当于每个点的边都要计算

分析融合过程：
             贡丸 科学 面包[面包] 五大夫松 历史 中国喀斯特 城市
    community_1 = [0, 2, 102, 139, 141, 181, 150]
    该社团融合了 中国喀斯特(荔波大小七孔,地貌,中国喀斯特) 其余的节点都包含标签这个关系
    所以为什么会有这个与其它点无关且该社团也不包含这个关系(地貌)
    所以需要探究下这个点加入时的 状态
    len = 124 时 所有社团融合时的Q值

experiment_community_detection6.py
思路：
    1. 初始化的时候需要将这个社团外接的边也加入到关系向量中去
    2. 合并社团的时候需要考虑，内部边和外部边的变化
    3. len大于250聚类，社团划分时不考虑巨人节点
    4. len小于50， 调整比重 p1 = 0.5 p2 = 0.5
    5. 忽略巨人边(从numpy_test.py读取出巨人边的list)的情况

问题：
    1. 巨人边的比重比较大(254/546)，将近一半数据的属性都是'标签'
    2. 需要考虑什么样的数据是社团划分不出来的而我们的领域划分可以划分出来的，想到的几个可能行的
        (1) 美食 - 中国 - 科技
            这种以巨人为节点，连接两个不相关领域的
        (2) 葫芦岛,气候条件,温带季风性气候
            葫芦岛,所属国家,中国
            葫芦岛,标签,旅游
            普罗旺斯,气候条件,地中海气候
            普罗旺斯,所属国家,法国
            普罗旺斯,标签,旅游
            这样的，在去掉巨人边'旅游'后，存在相同的边
            或者没有这些巨人边，只是包含相同属性的
    3. 之前构建图的时候是以 实体 - 关系 - 实体 构建 √
        不知道需不需要使用 实体 - 属性 - 值 构建

experiment_community_detection5.py
思路:
    1. 修改experiment_community_detection4.py中的代码，以满足community_3_index.csv
    2. 巨人节点的加入考虑的范围，
        degree > 20 : ['生活', '中国', '旅游', '地理', '地点']
                        27      32      53      25      32
    3. len大于300时，对all_edges(点对)进行社团融合

优化:

问题：
    1. 权重如何变化  目前还是之前的QM 0.8 QR 0.2
    2. 边关系如何考虑  巨人边关系(类似巨人节点)
    3.

目前情况:
    1. len大于300时，社团划分出了三个社团，但是与预期不是很相近和之前的社团划分结果相近
    2. len大于250时，社团划分出了两个个社团，但是与预期不是很相近 还没仔细看过
    3. len大于250且QM和QR的比重均为0.5
    4. len大于250 以巨人节点[旅游, 地理, 食品, 菜品]先聚类  效果不好
    5. len大于250 以[旅游 地理]聚类 去除[食品 菜品]


巨人节点的忽略：
    1. 先根据每个点的度，找到巨人节点(定义？？)
    2. 社团划分的前几轮，不包含巨人节点，到后面再加入

和涂老师讨论:
    1. 在遍历过程中，有一个实体已经被归到某个社团去了，但是等到下一个遍历当中发现它跟
    另一个社团的贴切度更高的时候，这个点会被重新划分到另一个社团中么
    2. 第五个节点，0和5在社团划分的Q值更大，但是因为你不遍历了，就看不出来了
    如果说1和5是排他的，正常情况下，1和5不应该放在一个社团里，你会把它放在同一社团里是因为0的贡献
    这种事有没有考虑过
    你现在社团划分分出来两个类效果不太好，就存在不属于一个社团的被带进来了，在形成社团之后，
    你只考虑社团整体核心的点遍历之后的关联度，但是事实上你原来社团划分之后，
    可能是在某些含义上有关联性，而对于整体没有关联
    在形成社团之后，遍历的时候……时间复杂度会很高
    3. 要考虑巨人节点，但是不要把巨人节点作为聚集的关键点，它可能会跨多领域，然后把根本不属于一类的带进来了
    反过来，以巨人节点为节点头，反方向的指向性，是否有个比较大的区分度
    把巨人节点发现并剔除出去，到后面再把它放进来
    4. 巨人边(通用概念，通用关系) 和巨人节点的操作一样
    5. 向量空间的影响暂时不考虑
    6. 遍历的方式，像TSP等传统算法都会有一些优化的方法，可以借鉴一下
    遍历的策略  状态记录表会不会导致信息的缺失

目前主要完成3和4

思路: 传统社团划分的模块度，可以理解为 每一个社区内部节点的度除以总边数 记作QM
我们引入了一个关于的关系类别的模块度QR，定义为 每两个社团关系向量的距离减去对应的平均距离


根据gephi观察我们划分的结果 不是特别理想
虽然是划分出了两个社团，但是结果显示的不是很理想
与我们预期的旅游和美食的差距较远，但是至少影响了最后划分的结果

需要改进的地方：
    1. 运行时间
    2. QR和QM的参数应该是变化的
    3. 向量空间如果更新(删除或者赋值为0)
    4. 以变化量为判断依据

3. 向量空间以矩阵的形式(numpy)存储的情况下
    (1)若删除,会导致索引发生变化,可能后面的就会对应不到
    比如说,原来是 0 1 2,删除1, 变为0 2
    索引也从(0,1,2)变成了(0,1) 再想指向2 索引就得是1
    (2)若赋值为0,会使向量空间多个向量为0向量,会影响标准化,也就影响了Q的计算
    比如说, 原来的矩阵为
    [ [1, 2, 3]
      [4, 0, 0]
      [1, 0, 1] ]
    第一个社团和第三个社团融合后就变为
    [ [0, 0, 0]
      [4, 0, 0]
      [2, 2, 4] ]
    向量距离的标准化


experiment_community_detection.py和experiment_community_detection2.py
这两个实现 pandas下的社团划分，但是花费时间太长，所以用numpy重新写文件

experiment_community_detection3.py 即上述所说的重新写的文件
但是时间优化的还不够，需要对数据进行数字化，减少部分操作的时间复杂度
(预计: 部分操作的时间复杂度会从O(n)降到O(1)，
但是估计还不够，需要对算法或数据结构再进行详细的规划)

experiment_community_detection4.py
思路:
    1. 使用数据数字化.py将community_2.csv转化为community_2_index.csv
    2. 修改experiment_community_detection3.py中的代码，以满足community_2_index.csv

优化:
    1. 想想如何newman的思路对接，将QR也变成dq
    2. 优化数据结构，将存储的时间降低

问题：
    1. 边不能重复(比如, 第一个:(1, 2, 3) 第二个:(1, 3, 3) 最后保存的是(1,3,3))
    (428,圆明园[清代著名皇家园林],地点,北京  432,圆明园[清代著名皇家园林],标签,北京
     在测试集中, 上面两个数据发生冲突)
    2. 速度还不够快(多进程, 从240s降到12s)

目前情况:
    1. 已经完成思路中的计划
    2. 使用多进程对遍历点对(i, j)的过程进行了优化
    3. 问题1 是通过向关系表(记录所有关系的里面)加入缺少的81(即地点)

名义师兄之前提到了带边类型的社团划分
设计了一个社团划分（领域划分）的算法
通过边的信息和传统社团划分相结合的方法，已达到划分的目的

运用类比想到可以通过边的信息和传统社团划分相结合来划分领域
传统的社团划分的想法是社团内连接多，社团间的连接少
迁移到我们的领域划分就是
领域内同类关系（边的属性）多，领域间同类关系少

于是做了一个实验
之前我手动筛选出了两个社团 旅游和食物
提取它们中关系，发现只有个别的是重合的，有比较明显的差异

所以我们基于传统社团划分的模块度QM提出了关于关系类别的模块度QR

QM 所有连接到领域i的边数量
每个领域边的数量加和/总边数
QR = 求和

最终模块度定义为……

我先简单的说下关于关系类别的模块度的计算
假设有两个点大龙湫和五大夫松，分别为社团i和j，关系类别有……这三个
所以定义它们的关系向量Ci和Cj分别（000）（000）
因为一开始每个点都是一个社团，不存在边，所以值全为0

len(c) 表示关系向量数，每次社团划分都会合并其中的两个社团

讲思路，k个点 取最大值Q




















